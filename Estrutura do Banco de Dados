

### Tabelas ###

-- Criar o Banco de Dados
CREATE DATABASE ECommerceDB;
GO

-- Selecionar o Banco de Dados
USE ECommerceDB;
GO

-- Tabela Clientes
CREATE TABLE Clientes (
    ID_Cliente INT PRIMARY KEY IDENTITY(1,1),
    Nome VARCHAR(100) NOT NULL,
    Email VARCHAR(100) UNIQUE NOT NULL,
    Tipo_Cliente CHAR(2) CHECK (Tipo_Cliente IN ('PJ', 'PF')),
    CPF_CNPJ VARCHAR(20) UNIQUE NOT NULL
);
GO

-- Tabela Pagamentos
CREATE TABLE Pagamentos (
    ID_Pagamento INT PRIMARY KEY IDENTITY(1,1),
    ID_Cliente INT NOT NULL,
    Tipo_Pagamento VARCHAR(50) NOT NULL,
    Detalhes VARCHAR(255),
    FOREIGN KEY (ID_Cliente) REFERENCES Clientes(ID_Cliente)
);
GO

-- Tabela Fornecedores
CREATE TABLE Fornecedores (
    ID_Fornecedor INT PRIMARY KEY IDENTITY(1,1),
    Razao_Social VARCHAR(100) NOT NULL,
    CNPJ VARCHAR(20) UNIQUE NOT NULL
);
GO

-- Tabela Produtos
CREATE TABLE Produtos (
    ID_Produto INT PRIMARY KEY IDENTITY(1,1),
    Categoria VARCHAR(50) NOT NULL, -- Correção: Adicionado tipo de dados VARCHAR(50)
    Descricao VARCHAR(255) NOT NULL,
    Valor DECIMAL(10,2) NOT NULL,
    ID_Fornecedor INT NOT NULL,
    FOREIGN KEY (ID_Fornecedor) REFERENCES Fornecedores(ID_Fornecedor)
);
GO

-- Tabela Estoques
CREATE TABLE Estoques (
    ID_Estoque INT PRIMARY KEY IDENTITY(1,1),
    Localizacao VARCHAR(100) NOT NULL
);
GO

-- Tabela Produto_has_Estoque
CREATE TABLE Produto_has_Estoque (
    ID_Produto INT NOT NULL,
    ID_Estoque INT NOT NULL,
    Quantidade INT NOT NULL,
    PRIMARY KEY (ID_Produto, ID_Estoque),
    FOREIGN KEY (ID_Produto) REFERENCES Produtos(ID_Produto),
    FOREIGN KEY (ID_Estoque) REFERENCES Estoques(ID_Estoque)
);
GO

-- Tabela Terceiro_Vendedores
CREATE TABLE Terceiro_Vendedores (
    ID_Terceiro_Vendedor INT PRIMARY KEY IDENTITY(1,1),
    Razao_Social VARCHAR(100) NOT NULL,
    Localizacao VARCHAR(100) NOT NULL
);
GO

-- Tabela Produtos_por_Vendedor
CREATE TABLE Produtos_por_Vendedor (
    ID_Terceiro_Vendedor INT NOT NULL,
    ID_Produto INT NOT NULL,
    Quantidade INT NOT NULL,
    PRIMARY KEY (ID_Terceiro_Vendedor, ID_Produto),
    FOREIGN KEY (ID_Terceiro_Vendedor) REFERENCES Terceiro_Vendedores(ID_Terceiro_Vendedor),
    FOREIGN KEY (ID_Produto) REFERENCES Produtos(ID_Produto)
);
GO

-- Tabela Pedidos
CREATE TABLE Pedidos (
    ID_Pedido INT PRIMARY KEY IDENTITY(1,1),
    ID_Cliente INT NOT NULL,
    Data_Pedido DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (ID_Cliente) REFERENCES Clientes(ID_Cliente)
);
GO

-- Tabela Relacao_Produto_Pedido
CREATE TABLE Relacao_Produto_Pedido (
    ID_Pedido INT NOT NULL,
    ID_Produto INT NOT NULL,
    Quantidade INT NOT NULL,
    PRIMARY KEY (ID_Pedido, ID_Produto),
    FOREIGN KEY (ID_Pedido) REFERENCES Pedidos(ID_Pedido),
    FOREIGN KEY (ID_Produto) REFERENCES Produtos(ID_Produto)
);
GO

-- Tabela Vendas
CREATE TABLE Vendas (
    ID_Venda INT PRIMARY KEY IDENTITY(1,1),
    ID_Pedido INT NOT NULL,
    Data_Venda DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (ID_Pedido) REFERENCES Pedidos(ID_Pedido)
);
GO

-- Tabela Entregas
CREATE TABLE Entregas (
    ID_Entrega INT PRIMARY KEY IDENTITY(1,1),
    ID_Pedido INT NOT NULL,
    Status VARCHAR(50) NOT NULL,
    Codigo_Rastreio VARCHAR(50) UNIQUE NOT NULL,
    Data_Prevista DATE NOT NULL,

## Queries SQL

 SELECT
    c.Nome,
    COUNT(p.ID_Pedido) AS NumeroPedidos
FROM
    Clientes c
LEFT JOIN
    Pedidos p ON c.ID_Cliente = p.ID_Cliente
GROUP BY
    c.Nome;

SELECT
    tv.Razao_Social AS Vendedor,
    f.Razao_Social AS Fornecedor
FROM
    Terceiro_Vendedores tv
INNER JOIN
    Fornecedores f ON tv.Razao_Social = f.Razao_Social;
